Decorators
==========

These decorators provide a convenient way to apply caching to functions and methods.

.. note::
   The `cached` decorator is a method of the CacheManager class and not a standalone function.

Usage Example
------------

.. code-block:: python

   from src.cache_manager import CacheManager
   from src.cache_config import CacheConfig
   
   # Create cache configuration
   config = CacheConfig(cache_ttl=300)  # 5 minutes TTL
   
   # Initialize cache manager
   cache_manager = CacheManager(config)
   
   # Apply caching to a function
   @cache_manager.cached()
   def get_user_data(user_id):
       # Expensive database or API call
       return {"user_id": user_id, "name": "Example User"}
   
   # The decorated function will now cache its results
   data = get_user_data(123)  # First call fetches data
   data = get_user_data(123)  # Second call returns cached data 